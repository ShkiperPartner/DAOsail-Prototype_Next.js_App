import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';
import { corsHeaders } from '../_shared/cors.ts';

// Environment validation
function getEnvVar(name: string): string {
  const value = Deno.env.get(name);
  if (!value) {
    throw new Error(`Missing required environment variable: ${name}`);
  }
  return value;
}

// OpenAI API call for embeddings
async function getEmbedding(text: string, apiKey: string): Promise<number[]> {
  const response = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      input: text,
      model: 'text-embedding-ada-002',
    }),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`OpenAI API error: ${error.error?.message || 'Unknown error'}`);
  }

  const data = await response.json();
  return data.data[0].embedding;
}

// OpenAI API call for chat completion
async function getFAQResponse(
  userQuestion: string,
  context: string,
  language: string,
  apiKey: string
): Promise<string> {
  const systemPrompt = language === 'ru'
    ? `–¢—ã FAQ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DAOsail ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∏ —Ç–æ—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.

üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –û—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –ù–∏–∫–∞–∫–∏—Ö –≤—ã–¥—É–º–æ–∫!

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Üí –æ—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–ï–¢ ‚Üí —Å–∫–∞–∂–∏ "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–æ—Ç —Å–µ–±—è" –∏–ª–∏ –∏–∑ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ–º–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ [1], [2] –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
‚Ä¢ –¢–æ–Ω: –¥–µ–ª–æ–≤–æ–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
‚Ä¢ –î–ª–∏–Ω–∞: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userQuestion}`
    : `You are DAOsail FAQ assistant ‚Äî strict and precise knowledge base helper.

üéØ MAIN RULE: Answer ONLY based on provided context. No inventions!

üìã INSTRUCTIONS:
‚Ä¢ If information exists in context ‚Üí answer clearly and briefly
‚Ä¢ If information is MISSING ‚Üí say "No information available in knowledge base for this question"
‚Ä¢ Never add information "from yourself" or general knowledge
‚Ä¢ Reference source numbers [1], [2] in answer if needed
‚Ä¢ Tone: professional but friendly
‚Ä¢ Length: 1-3 sentences, max 150 words

Provided context:
${context}

User question: ${userQuestion}`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userQuestion }
      ],
      max_tokens: 300,
      temperature: 0.1,
    }),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`OpenAI API error: ${error.error?.message || 'Unknown error'}`);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

interface FAQRequest {
  session_id: string;
  user_message: string;
  user_role?: string;
  prefs?: {
    lang?: string;
  };
}

interface FAQResponse {
  agent: string;
  final_text: string;
  citations: Array<{
    doc_id: string;
    url: string | null;
    chunk_idx: number;
    similarity: number;
  }>;
  trace: {
    intent: string;
    tools: string[];
    latency_ms: number;
  };
}

serve(async (req: Request) => {
  const startTime = Date.now();

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Environment setup
    const supabaseUrl = getEnvVar('SUPABASE_URL');
    const supabaseServiceKey = getEnvVar('SUPABASE_SERVICE_ROLE_KEY');
    const openaiApiKey = getEnvVar('OPENAI_API_KEY');

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Parse request
    const requestData: FAQRequest = await req.json();
    const {
      session_id,
      user_message,
      user_role = 'public',
      prefs = { lang: 'ru' }
    } = requestData;

    if (!session_id || !user_message) {
      return new Response(
        JSON.stringify({ error: 'Missing session_id or user_message' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // 1. Log user message
    await supabase.from('chat_messages').insert({
      session_id,
      role: 'user',
      content: user_message,
      agent: 'faq',
    });

    // 2. Get embedding for user question
    const queryEmbedding = await getEmbedding(user_message, openaiApiKey);

    // 3. Search knowledge base
    const roles = [user_role, 'public']; // Always include public access
    const { data: matches, error: searchError } = await supabase.rpc('match_docs', {
      query_embedding: queryEmbedding,
      match_count: 5,
      roles,
      min_similarity: 0.7
    });

    if (searchError) {
      throw new Error(`Knowledge search error: ${searchError.message}`);
    }

    // 4. Prepare context
    let context = '';
    const citations: FAQResponse['citations'] = [];

    if (matches && matches.length > 0) {
      context = matches
        .map((match: any, idx: number) =>
          `[${idx + 1}] ${match.text}\n(–ò—Å—Ç–æ—á–Ω–∏–∫: ${match.doc_id}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(match.similarity * 100)}%)`
        )
        .join('\n\n');

      citations.push(...matches.map((match: any) => ({
        doc_id: match.doc_id,
        url: match.url,
        chunk_idx: match.chunk_idx,
        similarity: match.similarity,
      })));
    }

    // 5. Get FAQ response
    const faqAnswer = await getFAQResponse(
      user_message,
      context,
      prefs.lang || 'ru',
      openaiApiKey
    );

    // 6. Log assistant response
    await supabase.from('chat_messages').insert({
      session_id,
      role: 'assistant',
      content: faqAnswer,
      agent: 'faq',
      meta: { citations }
    });

    // 7. Prepare response
    const response: FAQResponse = {
      agent: 'faq',
      final_text: faqAnswer,
      citations,
      trace: {
        intent: 'faq',
        tools: ['rag'],
        latency_ms: Date.now() - startTime
      }
    };

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('FAQ Handler Error:', error);

    return new Response(
      JSON.stringify({
        error: 'Internal server error',
        details: error.message
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});