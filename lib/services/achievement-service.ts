import { profileService } from '@/lib/supabase/profile-service';
import type { UserProfile } from '@/lib/types/profile';

export interface AchievementTemplate {
  id: string;
  title: string;
  titleRu: string;
  description: string;
  descriptionRu: string;
  iconName: string;
  category: string;
  checkCondition: (profile: UserProfile) => boolean;
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const ACHIEVEMENT_TEMPLATES: AchievementTemplate[] = [
  {
    id: 'first_question',
    title: 'First Question',
    titleRu: '–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å',
    description: 'Asked your first question to the AI consultant',
    descriptionRu: '–ó–∞–¥–∞–ª –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É',
    iconName: 'MessageSquare',
    category: 'progress',
    checkCondition: (profile) => profile.stats.questionsAsked >= 1
  },
  {
    id: 'curious_explorer',
    title: 'Curious Explorer',
    titleRu: '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
    description: 'Asked 10 questions to learn more about sailing',
    descriptionRu: '–ó–∞–¥–∞–ª 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏–∑—É—á–∞—è –ø–∞—Ä—É—Å–Ω—ã–π —Å–ø–æ—Ä—Ç',
    iconName: 'Compass',
    category: 'progress',
    checkCondition: (profile) => profile.stats.questionsAsked >= 10
  },
  {
    id: 'inquisitive_mind',
    title: 'Inquisitive Mind',
    titleRu: '–ü—ã—Ç–ª–∏–≤—ã–π —É–º',
    description: 'Asked 25 questions - your curiosity knows no bounds!',
    descriptionRu: '–ó–∞–¥–∞–ª 25 –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–≤–æ–µ–º—É –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤—É –Ω–µ—Ç –≥—Ä–∞–Ω–∏—Ü!',
    iconName: 'Brain',
    category: 'progress',
    checkCondition: (profile) => profile.stats.questionsAsked >= 25
  },
  {
    id: 'first_lesson',
    title: 'First Steps',
    titleRu: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: 'Completed your first sailing lesson',
    descriptionRu: '–ü—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ø–æ –ø–∞—Ä—É—Å–Ω–æ–º—É —Å–ø–æ—Ä—Ç—É',
    iconName: 'BookOpen',
    category: 'learning',
    checkCondition: (profile) => profile.stats.lessonsCompleted >= 1
  },
  {
    id: 'dedicated_learner',
    title: 'Dedicated Learner',
    titleRu: '–ü—Ä–∏–ª–µ–∂–Ω—ã–π —É—á–µ–Ω–∏–∫',
    description: 'Completed 5 lessons - you\'re making great progress!',
    descriptionRu: '–ü—Ä–æ—à–µ–ª 5 —É—Ä–æ–∫–æ–≤ - –æ—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!',
    iconName: 'GraduationCap',
    category: 'learning',
    checkCondition: (profile) => profile.stats.lessonsCompleted >= 5
  },
  {
    id: 'knowledge_seeker',
    title: 'Knowledge Seeker',
    titleRu: '–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π',
    description: 'Read 10 articles about sailing and maritime topics',
    descriptionRu: '–ü—Ä–æ—á–∏—Ç–∞–ª 10 —Å—Ç–∞—Ç–µ–π –æ –ø–∞—Ä—É—Å–Ω–æ–º —Å–ø–æ—Ä—Ç–µ –∏ –º–æ—Ä—Å–∫–∏—Ö —Ç–µ–º–∞—Ö',
    iconName: 'FileText',
    category: 'learning',
    checkCondition: (profile) => profile.stats.articlesRead >= 10
  },
  {
    id: 'community_member',
    title: 'Community Member',
    titleRu: '–ß–ª–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
    description: 'Participated in community discussions',
    descriptionRu: '–ü—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
    iconName: 'Users',
    category: 'community',
    checkCondition: (profile) => profile.stats.communityMessages >= 1
  },
  {
    id: 'active_contributor',
    title: 'Active Contributor',
    titleRu: '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
    description: 'Posted 10 messages in community discussions',
    descriptionRu: '–ù–∞–ø–∏—Å–∞–ª 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
    iconName: 'MessageCircle',
    category: 'community',
    checkCondition: (profile) => profile.stats.communityMessages >= 10
  },
  {
    id: 'early_adopter',
    title: 'Early Adopter',
    titleRu: '–†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    description: 'Joined DAOsail in its early stages',
    descriptionRu: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ DAOsail –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ',
    iconName: 'Zap',
    category: 'special',
    checkCondition: (profile) => {
      const joinDate = new Date(profile.joinDate);
      const earlyDate = new Date('2025-01-01'); // –†–∞–Ω–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ 2025
      return joinDate < earlyDate;
    }
  },
  {
    id: 'loyal_user',
    title: 'Loyal User',
    titleRu: '–í–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    description: 'Logged in for 7 consecutive days',
    descriptionRu: '–ó–∞—Ö–æ–¥–∏–ª –≤ —Å–∏—Å—Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    iconName: 'Calendar',
    category: 'progress',
    checkCondition: (profile) => profile.stats.totalLogins >= 7
  },
  {
    id: 'role_promotion_passenger',
    title: 'Welcome Aboard!',
    titleRu: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!',
    description: 'Advanced to Passenger rank',
    descriptionRu: '–ü–æ–ª—É—á–∏–ª –∑–≤–∞–Ω–∏–µ –ü–∞—Å—Å–∞–∂–∏—Ä–∞',
    iconName: 'Ship',
    category: 'progression',
    checkCondition: (profile) => profile.role === '–ü–∞—Å—Å–∞–∂–∏—Ä' || profile.role === '–ú–∞—Ç—Ä–æ—Å'
  },
  {
    id: 'role_promotion_sailor',
    title: 'True Sailor',
    titleRu: '–ù–∞—Å—Ç–æ—è—â–∏–π –º–∞—Ç—Ä–æ—Å',
    description: 'Advanced to Sailor rank - you\'re now part of the crew!',
    descriptionRu: '–ü–æ–ª—É—á–∏–ª –∑–≤–∞–Ω–∏–µ –ú–∞—Ç—Ä–æ—Å–∞ - —Ç–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å —ç–∫–∏–ø–∞–∂–∞!',
    iconName: 'Anchor',
    category: 'progression',
    checkCondition: (profile) => profile.role === '–ú–∞—Ç—Ä–æ—Å'
  }
];

export class AchievementService {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async checkAndAddAchievements(userId: string, profile: UserProfile): Promise<string[]> {
    const newAchievements: string[] = [];
    const existingAchievementIds = profile.achievements.map(a => a.id);

    for (const template of ACHIEVEMENT_TEMPLATES) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (existingAchievementIds.includes(template.id)) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
      if (template.checkCondition(profile)) {
        try {
          const success = await profileService.addAchievement(userId, {
            achievement_id: template.id,
            title: template.title,
            title_ru: template.titleRu,
            description: template.description,
            description_ru: template.descriptionRu,
            icon_name: template.iconName,
            category: template.category,
            unlocked_at: new Date().toISOString()
          });

          if (success) {
            newAchievements.push(template.id);
            console.log(`üèÜ Achievement unlocked: ${template.title} (${template.titleRu})`);
          }
        } catch (error) {
          console.error(`Error adding achievement ${template.id}:`, error);
        }
      }
    }

    return newAchievements;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAllTemplates(): AchievementTemplate[] {
    return ACHIEVEMENT_TEMPLATES;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
  getTemplate(id: string): AchievementTemplate | undefined {
    return ACHIEVEMENT_TEMPLATES.find(t => t.id === id);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏
  getAvailableForRole(role: string): AchievementTemplate[] {
    // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
    const baseAchievements = ACHIEVEMENT_TEMPLATES.filter(t =>
      t.category !== 'progression' ||
      (t.id === 'role_promotion_passenger' && role !== '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è') ||
      (t.id === 'role_promotion_sailor' && role === '–ú–∞—Ç—Ä–æ—Å')
    );

    return baseAchievements;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getProgressForAchievement(id: string, profile: UserProfile): { current: number; target: number; percentage: number } | null {
    const template = this.getTemplate(id);
    if (!template) return null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (id.includes('question')) {
      const target = id === 'first_question' ? 1 : id === 'curious_explorer' ? 10 : 25;
      return {
        current: profile.stats.questionsAsked,
        target,
        percentage: Math.min(100, (profile.stats.questionsAsked / target) * 100)
      };
    }

    if (id.includes('lesson')) {
      const target = id === 'first_lesson' ? 1 : 5;
      return {
        current: profile.stats.lessonsCompleted,
        target,
        percentage: Math.min(100, (profile.stats.lessonsCompleted / target) * 100)
      };
    }

    if (id.includes('article') || id === 'knowledge_seeker') {
      return {
        current: profile.stats.articlesRead,
        target: 10,
        percentage: Math.min(100, (profile.stats.articlesRead / 10) * 100)
      };
    }

    if (id.includes('community')) {
      const target = id === 'community_member' ? 1 : 10;
      return {
        current: profile.stats.communityMessages,
        target,
        percentage: Math.min(100, (profile.stats.communityMessages / target) * 100)
      };
    }

    if (id === 'loyal_user') {
      return {
        current: profile.stats.totalLogins,
        target: 7,
        percentage: Math.min(100, (profile.stats.totalLogins / 7) * 100)
      };
    }

    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const achievementService = new AchievementService();