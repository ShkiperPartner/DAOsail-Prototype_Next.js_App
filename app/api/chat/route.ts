import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { createClient } from '@/lib/supabase/server';
import { validateOpenAI } from '@/lib/utils/env-validation';
import { createStreamResponse, createApiResponse } from '@/lib/utils/cors';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
const openai = new OpenAI({
  apiKey: validateOpenAI(),
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (RAG)
async function getRelevantContext(
  userMessage: string,
  assistantType: 'navigator' | 'skipper' | 'steward',
  userRole: string = '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è',
  language: 'ru' | 'en' = 'ru'
): Promise<{ context: string; chunksUsed: number; citations: any[] }> {
  try {
    // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const embeddingResponse = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: userMessage.trim(),
    });

    const queryEmbedding = embeddingResponse.data[0].embedding;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getAccessibleRoles = (role: string): string[] => {
      const roleHierarchy: Record<string, string[]> = {
        '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è': ['public'],
        '–ü–∞—Å—Å–∞–∂–∏—Ä': ['public', 'passenger'],
        '–ú–∞—Ç—Ä–æ—Å': ['public', 'passenger', 'sailor'],
        '–ü–∞—Ä—Ç–Ω–µ—Ä': ['public', 'passenger', 'sailor', 'partner'],
        'admin': ['public', 'passenger', 'sailor', 'partner', 'admin']
      };
      return roleHierarchy[role] || ['public'];
    };

    const accessibleRoles = getAccessibleRoles(userRole);

    const supabase = await createClient();

    // –î–ª—è steward –∏—Å–ø–æ–ª—å–∑—É–µ–º RAG –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–∫–∞–∫ FAQ)
    if (assistantType === 'steward') {
      console.log('üîç [STEWARD RAG] Starting search...');
      console.log('üîç [STEWARD RAG] User message:', userMessage.substring(0, 100));
      console.log('üîç [STEWARD RAG] User role:', userRole);

      const userRoles = [userRole.toLowerCase(), 'public'];
      console.log('üîç [STEWARD RAG] Search roles:', userRoles);

      const { data: matches, error: searchError } = await supabase.rpc('match_chunks_docs', {
        query_embedding: queryEmbedding,
        match_count: 5,
        roles: userRoles,
        min_similarity: 0.7
      });

      if (searchError) {
        console.error('‚ùå [STEWARD RAG] Knowledge search error:', searchError);
        return { context: '', chunksUsed: 0, citations: [] };
      }

      console.log('üîç [STEWARD RAG] Matches found:', matches?.length || 0);

      if (!matches || matches.length === 0) {
        console.log('‚ö†Ô∏è  [STEWARD RAG] No matches found - will respond without context');
        return { context: '', chunksUsed: 0, citations: [] };
      }

      console.log('‚úÖ [STEWARD RAG] Top match similarity:', matches[0]?.similarity);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ citations
      const context = matches
        .map((match: any, idx: number) =>
          `[${idx + 1}] ${match.content}\n(–ò—Å—Ç–æ—á–Ω–∏–∫: ${match.path}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(match.similarity * 100)}%)`
        )
        .join('\n\n');

      const citations = matches.map((match: any) => ({
        doc_id: match.path,
        url: null,
        chunk_idx: match.metadata?.chunk || 0,
        similarity: match.similarity,
      }));

      return {
        context,
        chunksUsed: matches.length,
        citations
      };
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (navigator, skipper) - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
    const categoryMap = {
      navigator: ['sailing_basics', 'navigation', 'weather', 'equipment'],
      skipper: ['safety', 'crew_management', 'emergency', 'racing']
    };

    let allResults: any[] = [];

    // –ò—â–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º
    for (const category of categoryMap[assistantType as keyof typeof categoryMap]) {
      const { data } = await supabase.rpc('search_knowledge_documents_by_role', {
        query_embedding: queryEmbedding,
        match_threshold: 0.7,
        match_count: 2,
        filter_category: category,
        filter_language: language,
        accessible_roles: accessibleRoles
      });

      if (data && data.length > 0) {
        allResults.push(...data);
      }
    }

    if (allResults.length === 0) {
      return { context: '', chunksUsed: 0, citations: [] };
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const uniqueResults = allResults
      .filter((doc, index, self) => index === self.findIndex(d => d.id === doc.id))
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, 3);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞
    const accessLevel = accessibleRoles[accessibleRoles.length - 1];
    const contextParts = uniqueResults.map(doc =>
      `**${doc.title}** (${doc.knowledge_level || 'basic'}, ${doc.target_audience || 'general'})\n${doc.content}`
    );

    const contextHeader = language === 'ru'
      ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${accessLevel}):`
      : `Context from knowledge base (access level: ${accessLevel}):`;

    return {
      context: `${contextHeader}\n\n${contextParts.join('\n\n---\n\n')}`,
      chunksUsed: uniqueResults.length,
      citations: []
    };

  } catch (error) {
    console.error('Error getting relevant context:', error);
    return { context: '', chunksUsed: 0, citations: [] };
  }
}

export async function POST(request: NextRequest) {
  try {
    const { messages, assistantType, userRole, userId, filesContext } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≥–æ—Å—Ç–µ–π —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)
    const supabase = await createClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    // –î–ª—è –≥–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å
    const effectiveUserRole = user ? userRole || '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è' : '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è';
    const isGuest = !user;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json({ error: 'Messages are required' }, { status: 400 });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É)
    const userLanguage = 'ru'; // –ü–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const lastUserMessage = messages[messages.length - 1];
    let contextResult = { context: '', chunksUsed: 0 };

    if (lastUserMessage && lastUserMessage.role === 'user') {
      contextResult = await getRelevantContext(
        lastUserMessage.content,
        assistantType,
        effectiveUserRole,
        userLanguage
      );
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const baseSystemPrompts = {
      navigator: {
        ru: `–¢—ã - –ù–∞–≤–∏–≥–∞—Ç–æ—Ä DAOsail, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∞—Ä—É—Å–Ω–æ–º—É —Å–ø–æ—Ä—Ç—É, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –º–æ—Ä—Å–∫–∏–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º.
        –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑—É—á–∞—Ç—å –æ—Å–Ω–æ–≤—ã –ø–∞—Ä—É—Å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã, –ø–æ–Ω–∏–º–∞—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.
        –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ—Ä—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.

        ${contextResult.context ? '–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∏–∂–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –Ω–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–µ—ë –Ω–∞–ø—Ä—è–º—É—é. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ç–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.' : ''}

        –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`,
        en: `You are Navigator DAOsail, an expert in sailing, navigation, and maritime voyages.
        You help users learn sailing basics, plan routes, understand weather conditions and navigation systems.
        Respond in a friendly manner, using maritime terminology where appropriate. Always give practical advice.

        ${contextResult.context ? 'IMPORTANT: Use the information from the knowledge base below for more accurate answers, but don\'t reference it directly. Answer naturally as if it\'s your own knowledge.' : ''}

        If you don't know the exact answer, be honest about it and suggest where to find the information.`
      },
      skipper: {
        ru: `–¢—ã - –®–∫–∏–ø–µ—Ä DAOsail, –æ–ø—ã—Ç–Ω—ã–π –∫–∞–ø–∏—Ç–∞–Ω —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ö—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–æ–π.
        –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–æ–¥–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —ç–∫–∏–ø–∞–∂–µ–º, –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
        –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –¥–µ–ª–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.

        ${contextResult.context ? '–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∏–∂–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –Ω–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–µ—ë –Ω–∞–ø—Ä—è–º—É—é. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ç–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.' : ''}

        –í—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø–∞—Ä—É—Å–Ω–æ–º—É —Å–ø–æ—Ä—Ç—É.`,
        en: `You are Skipper DAOsail, an experienced captain with years of yacht and crew management experience.
        You specialize in water safety, crew management, and decision-making in challenging situations.
        Respond as an experienced mentor, sharing real experience and practical advice.

        ${contextResult.context ? 'IMPORTANT: Use the information from the knowledge base below for more accurate answers, but don\'t reference it directly. Answer naturally as if it\'s your own knowledge.' : ''}

        Always emphasize the importance of safety and responsible approach to sailing.`
      },
      steward: {
        ru: `–¢—ã - –°—Ç—é–∞—Ä–¥ DAOsail, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É DAOsail.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –æ –∫–ª—É–±–µ, –ø—Ä–æ–µ–∫—Ç–µ, —è—Ö—Ç–∏–Ω–≥–µ –∏ Web3.

        üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

        üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–¢–ò–õ–Æ –û–¢–í–ï–¢–û–í:
        ‚Ä¢ –¢–æ–Ω: —Ç—ë–ø–ª—ã–π, –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
        ‚Ä¢ –°—Ç–∏–ª—å: –º–æ–∂–µ—à—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≤–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã
        ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, –∞–±–∑–∞—Ü—ã)
        ‚Ä¢ –î–ª–∏–Ω–∞: 2-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞
        ‚Ä¢ –°—Å—ã–ª–∫–∏: –º–æ–∂–µ—à—å —É–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ [1], [2] –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

        ‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
        ‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–ï–¢ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Üí —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
        ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥–µ—Ç–∞–ª–∏
        ‚Ä¢ –ù–ï –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —è—Ö—Ç–∏–Ω–≥–µ –∏–ª–∏ Web3
        ‚Ä¢ –ü—Ä–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - –ª—É—á—à–µ —Å–∫–∞–∑–∞—Ç—å "–Ω–µ –∑–Ω–∞—é", —á–µ–º –≤—ã–¥—É–º–∞—Ç—å

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
        ${contextResult.context || '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç.'}`,
        en: `You are Steward DAOsail, a friendly and hospitable assistant for the DAOsail project.
        Your task is to welcome new visitors and answer their questions about the club, project, yachting, and Web3.

        üéØ MAIN RULE: Answer ONLY based on the provided context from the knowledge base.

        üìã ANSWER STYLE INSTRUCTIONS:
        ‚Ä¢ Tone: warm, hospitable, professional
        ‚Ä¢ Style: you can formulate answers in your own words, add greetings and polite phrases
        ‚Ä¢ Structure: make answers clear and structured (use lists, paragraphs)
        ‚Ä¢ Length: 2-5 sentences, depending on the question
        ‚Ä¢ References: you can mention sources [1], [2] if appropriate

        ‚ö†Ô∏è LIMITATIONS:
        ‚Ä¢ If information is NOT in context ‚Üí honestly say "Unfortunately, I don't have information on this in the knowledge base"
        ‚Ä¢ NEVER invent facts, dates, numbers, or details
        ‚Ä¢ DO NOT add information from general knowledge about yachting or Web3
        ‚Ä¢ When uncertain - better to say "I don't know" than to invent

        Provided context from knowledge base:
        ${contextResult.context || 'Context not found. Inform user that information is not available.'}`
      }
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let systemPrompt = baseSystemPrompts[assistantType as keyof typeof baseSystemPrompts]?.[userLanguage]
      || baseSystemPrompts.navigator.ru;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω (–¥–ª—è steward –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –≤ –ø—Ä–æ–º–ø—Ç–µ)
    if (contextResult.context && assistantType !== 'steward') {
      systemPrompt += `\n\n${contextResult.context}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (filesContext && filesContext.trim()) {
      systemPrompt += `\n\n${filesContext}`;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
    const openaiMessages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      { role: 'system', content: systemPrompt },
      ...messages.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }))
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ (–∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    const url = new URL(request.url);
    const useStreaming = url.searchParams.get('stream') === 'true';

    if (useStreaming) {
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è OpenAI
      const stream = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: openaiMessages,
        temperature: 0.7,
        max_tokens: 1000,
        stream: true,
      });

      // –°–æ–∑–¥–∞–µ–º ReadableStream –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É
      const encoder = new TextEncoder();
      const readableStream = new ReadableStream({
        async start(controller) {
          let fullContent = '';

          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞
            const metadata = {
              type: 'metadata',
              assistantType,
              userRole: effectiveUserRole,
              knowledgeChunksUsed: contextResult.chunksUsed,
              isGuest,
              timestamp: new Date().toISOString()
            };

            controller.enqueue(
              encoder.encode(`data: ${JSON.stringify(metadata)}\n\n`)
            );

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –æ—Ç OpenAI
            for await (const chunk of stream) {
              const content = chunk.choices[0]?.delta?.content;
              if (content) {
                fullContent += content;

                const streamData = {
                  type: 'content',
                  content: content,
                  fullContent: fullContent
                };

                controller.enqueue(
                  encoder.encode(`data: ${JSON.stringify(streamData)}\n\n`)
                );
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
              if (chunk.choices[0]?.finish_reason) {
                const finishData = {
                  type: 'finish',
                  reason: chunk.choices[0].finish_reason,
                  fullContent: fullContent,
                  message: {
                    role: 'assistant' as const,
                    content: fullContent,
                    timestamp: new Date().toISOString(),
                    model: 'gpt-4o-mini',
                    assistantType,
                    citations: contextResult.citations || [],
                    metadata: {
                      userRole: effectiveUserRole,
                      knowledgeChunksUsed: contextResult.chunksUsed,
                      accessLevel: effectiveUserRole === '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è' ? 'public' :
                                   effectiveUserRole === '–ü–∞—Å—Å–∞–∂–∏—Ä' ? 'passenger' :
                                   effectiveUserRole === '–ú–∞—Ç—Ä–æ—Å' ? 'sailor' : 'partner',
                      isGuest
                    }
                  }
                };

                controller.enqueue(
                  encoder.encode(`data: ${JSON.stringify(finishData)}\n\n`)
                );
                break;
              }
            }
          } catch (error) {
            const errorData = {
              type: 'error',
              error: error instanceof Error ? error.message : 'Unknown error'
            };

            controller.enqueue(
              encoder.encode(`data: ${JSON.stringify(errorData)}\n\n`)
            );
          } finally {
            controller.close();
          }
        }
      });

      return createStreamResponse(readableStream, request.headers.get('origin'));
    } else {
      // –û–±—ã—á–Ω—ã–π (–Ω–µ-—Å—Ç—Ä–∏–º) –æ—Ç–≤–µ—Ç
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: openaiMessages,
        temperature: 0.7,
        max_tokens: 1000,
        stream: false,
      });

      const aiResponse = completion.choices[0]?.message?.content;

      if (!aiResponse) {
        return NextResponse.json({ error: 'No response from AI' }, { status: 500 });
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const response = {
        role: 'assistant' as const,
        content: aiResponse,
        timestamp: new Date().toISOString(),
        model: 'gpt-4o-mini',
        assistantType,
        citations: contextResult.citations || [],
        metadata: {
          userRole: effectiveUserRole,
          knowledgeChunksUsed: contextResult.chunksUsed,
          accessLevel: effectiveUserRole === '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è' ? 'public' :
                       effectiveUserRole === '–ü–∞—Å—Å–∞–∂–∏—Ä' ? 'passenger' :
                       effectiveUserRole === '–ú–∞—Ç—Ä–æ—Å' ? 'sailor' : 'partner',
          isGuest
        }
      };

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      return NextResponse.json({
        message: response,
        usage: {
          prompt_tokens: completion.usage?.prompt_tokens || 0,
          completion_tokens: completion.usage?.completion_tokens || 0,
          total_tokens: completion.usage?.total_tokens || 0
        },
        knowledgeChunksUsed: contextResult.chunksUsed,
        userRole: effectiveUserRole,
        isGuest
      });
    }

  } catch (error) {
    console.error('Chat API Error:', error);

    if (error instanceof OpenAI.APIError) {
      return NextResponse.json(
        { error: `OpenAI API Error: ${error.message}` },
        { status: error.status || 500 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: GET –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
export async function GET(request: NextRequest) {
  const supabase = createClient();
  const { data: { user }, error: authError } = await supabase.auth.getUser();

  if (authError || !user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase

  return NextResponse.json({ chats: [] });
}