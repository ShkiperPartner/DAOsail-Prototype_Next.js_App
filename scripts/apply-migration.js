// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é FAQ –Ω–∞–ø—Ä—è–º—É—é –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config({ path: '.env.local' });

async function applyMigration() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é FAQ...\n');

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationSQL = fs.readFileSync(
      'supabase/migrations/20250926000001_create_faq_tables.sql',
      'utf8'
    );

    console.log('üìÑ –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...');
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    const { data, error } = await supabase.rpc('exec', {
      sql: migrationSQL
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º
      console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º...');

      // –û—Å–Ω–æ–≤–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã
      const commands = [
        'create extension if not exists vector;',

        `create table if not exists public.chat_messages (
          id           uuid primary key default gen_random_uuid(),
          session_id   text not null,
          role         text not null check (role in ('user','assistant','system','tool')),
          content      text not null,
          agent        text not null,
          created_at   timestamptz not null default now(),
          meta         jsonb default '{}'::jsonb
        );`,

        `create table if not exists public.knowledge_chunks (
          id              bigserial primary key,
          doc_id          text not null,
          chunk_idx       int  not null,
          text            text not null,
          embedding       vector(1536),
          accessible_roles text[] not null default array['public'],
          tags            text[] not null default array[]::text[],
          url             text,
          updated_at      timestamptz not null default now()
        );`,

        `create or replace function public.match_docs(
          query_embedding vector(1536),
          match_count int default 8,
          roles text[] default array['public'],
          min_similarity float default 0.75
        ) returns table (
          id bigint,
          doc_id text,
          chunk_idx int,
          text text,
          url text,
          similarity float
        ) language sql stable as $$
          select
            kc.id,
            kc.doc_id,
            kc.chunk_idx,
            kc.text,
            kc.url,
            1 - (kc.embedding <=> query_embedding) as similarity
          from public.knowledge_chunks kc
          where kc.accessible_roles && roles
            and (1 - (kc.embedding <=> query_embedding)) >= min_similarity
          order by kc.embedding <=> query_embedding
          limit match_count;
        $$;`
      ];

      for (let i = 0; i < commands.length; i++) {
        const cmd = commands[i];
        console.log(`  [${i+1}/${commands.length}] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É...`);

        const { error: cmdError } = await supabase.rpc('sql', { query: cmd });
        if (cmdError) {
          console.error(`    ‚ùå –û—à–∏–±–∫–∞: ${cmdError.message}`);
        } else {
          console.log(`    ‚úÖ –£—Å–ø–µ—à–Ω–æ`);
        }
      }

    } else {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é match_docs...');
    const { data: testData, error: testError } = await supabase.rpc('match_docs', {
      query_embedding: new Array(1536).fill(0),
      match_count: 1,
      roles: ['public']
    });

    if (testError) {
      console.error('‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', testError.message);
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è match_docs —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log(`üìä –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${testData?.length || 0}`);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

applyMigration();