// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç FAQ –∞–≥–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
// –ó–∞–ø—É—Å–∫: node scripts/test-faq.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !OPENAI_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env.local:');
  console.log('- SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY');
  console.log('- OPENAI_API_KEY');
  process.exit(1);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
async function getEmbedding(text) {
  const response = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      input: text,
      model: 'text-embedding-ada-002',
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.status}`);
  }

  const data = await response.json();
  return data.data[0].embedding;
}

// FAQ –æ—Ç–≤–µ—Ç
async function getFAQResponse(userQuestion, context) {
  const systemPrompt = `–¢—ã FAQ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DAOsail ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∏ —Ç–æ—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.

üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –û—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –ù–∏–∫–∞–∫–∏—Ö –≤—ã–¥—É–º–æ–∫!

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Üí –æ—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–ï–¢ ‚Üí —Å–∫–∞–∂–∏ "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–æ—Ç —Å–µ–±—è" –∏–ª–∏ –∏–∑ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ–º–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ [1], [2] –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
‚Ä¢ –¢–æ–Ω: –¥–µ–ª–æ–≤–æ–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
‚Ä¢ –î–ª–∏–Ω–∞: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userQuestion}`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userQuestion }
      ],
      max_tokens: 300,
      temperature: 0.1,
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.status}`);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
async function testFAQ() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º FAQ –∞–≥–µ–Ω—Ç–∞...\n');

  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

  // –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  const testQuestions = [
    '–ß—Ç–æ —Ç–∞–∫–æ–µ DAOsail?',
    '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç DAO –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
    '–ö–∞–∫–∏–µ —Ä–æ–ª–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ?',
    '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∏—Ç–∫–æ–∏–Ω?', // –í–æ–ø—Ä–æ—Å –≤–Ω–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
  ];

  for (let i = 0; i < testQuestions.length; i++) {
    const question = testQuestions[i];
    console.log(`\nüìù –í–æ–ø—Ä–æ—Å ${i + 1}: "${question}"`);
    console.log('‚îÄ'.repeat(50));

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥...');
      const queryEmbedding = await getEmbedding(question);

      // 2. –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
      console.log('üìö –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...');
      const { data: matches, error } = await supabase.rpc('match_docs', {
        query_embedding: queryEmbedding,
        match_count: 3,
        roles: ['public'],
        min_similarity: 0.7
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        continue;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matches?.length || 0} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);

      // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      let context = '';
      if (matches && matches.length > 0) {
        context = matches
          .map((match, idx) =>
            `[${idx + 1}] ${match.text}\n(–ò—Å—Ç–æ—á–Ω–∏–∫: ${match.doc_id}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(match.similarity * 100)}%)`
          )
          .join('\n\n');

        console.log('\nüìñ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞:');
        matches.forEach((match, idx) => {
          console.log(`  [${idx + 1}] ${match.doc_id} (${Math.round(match.similarity * 100)}%)`);
        });
      } else {
        console.log('‚ö†Ô∏è  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç FAQ –∞–≥–µ–Ω—Ç–∞
      console.log('\nü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç FAQ –∞–≥–µ–Ω—Ç–∞...');
      const answer = await getFAQResponse(question, context);

      console.log('\n‚ú® –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:');
      console.log(`"${answer}"`);

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < testQuestions.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫
testFAQ().catch(console.error);