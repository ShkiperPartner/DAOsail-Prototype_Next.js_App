// –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ OpenAI API –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config({ path: '.env.local' });

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY');
  process.exit(1);
}

// FAQ –æ—Ç–≤–µ—Ç —Å –º–æ–∫–æ–≤—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
async function getFAQResponse(userQuestion, context) {
  const systemPrompt = `–¢—ã FAQ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DAOsail ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∏ —Ç–æ—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.

üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –û—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –ù–∏–∫–∞–∫–∏—Ö –≤—ã–¥—É–º–æ–∫!

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Üí –æ—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ
‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–ï–¢ ‚Üí —Å–∫–∞–∂–∏ "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–æ—Ç —Å–µ–±—è" –∏–ª–∏ –∏–∑ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ–º–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ [1], [2] –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
‚Ä¢ –¢–æ–Ω: –¥–µ–ª–æ–≤–æ–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
‚Ä¢ –î–ª–∏–Ω–∞: 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userQuestion}`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userQuestion }
      ],
      max_tokens: 300,
      temperature: 0.1,
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.status}`);
  }

  const data = await response.json();
  return data.choices[0].message.content;
}

async function testOpenAI() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API –∏ FAQ –ø—Ä–æ–º–ø—Ç...\n');

  // –ú–æ–∫–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞—à–µ–≥–æ FAQ
  const mockContext = `[1] DAOsail ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –ø–∞—Ä—É—Å–Ω—ã–π —Å–ø–æ—Ä—Ç –∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (DAO). –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ —è—Ö—Ç–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
(–ò—Å—Ç–æ—á–Ω–∏–∫: simple-faq-data.md, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: 95%)

[2] –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å DAOsail ‚Äî –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏—è —è—Ö—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ —è—Ö—Ç–∞–º–∏, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
(–ò—Å—Ç–æ—á–Ω–∏–∫: simple-faq-data.md, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: 88%)`;

  const testCases = [
    {
      question: '–ß—Ç–æ —Ç–∞–∫–æ–µ DAOsail?',
      context: mockContext,
      expectation: '–î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
    },
    {
      question: '–ö–∞–∫–∏–µ —Ä–æ–ª–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ?',
      context: mockContext,
      expectation: '–î–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ'
    },
    {
      question: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∏—Ç–∫–æ–∏–Ω?',
      context: mockContext,
      expectation: '–î–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π'
    },
    {
      question: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ü–µ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞',
      context: mockContext,
      expectation: '–î–æ–ª–∂–µ–Ω —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏–∏ —è—Ö—Ç–∏–Ω–≥–∞'
    }
  ];

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];

    console.log(`\nüìù –¢–µ—Å—Ç ${i + 1}: "${testCase.question}"`);
    console.log(`üéØ –û–∂–∏–¥–∞–Ω–∏–µ: ${testCase.expectation}`);
    console.log('‚îÄ'.repeat(60));

    try {
      const answer = await getFAQResponse(testCase.question, testCase.context);
      console.log('ü§ñ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:');
      console.log(`"${answer}"`);

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
      if (testCase.question.includes('–±–∏—Ç–∫–æ–∏–Ω') || testCase.question.includes('—Ä–æ–ª–∏')) {
        if (answer.includes('–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏') || answer.includes('No information')) {
          console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç–≤–µ—á–∞—Ç—å');
        } else {
          console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è - –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
        }
      } else {
        if (answer.includes('DAOsail') || answer.includes('–ø–∞—Ä—É—Å–Ω—ã–π') || answer.includes('–¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏—è')) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
        } else {
          console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç');
        }
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < testCases.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫');
}

testOpenAI().catch(console.error);