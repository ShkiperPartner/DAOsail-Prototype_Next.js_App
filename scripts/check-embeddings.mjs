// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è embeddings –≤ chunks
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://rmlgsnlgwmstajwdhygg.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJtbGdzbmxnd21zdGFqd2RoeWdnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDU2Mjg4MiwiZXhwIjoyMDcwMTM4ODgyfQ.xomNoP1ue8HQvIDNojIVlmkRSVuXqMcSp7gQ-TME3mo';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîç Checking embeddings in chunks table...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ embedding –∫–æ–ª–æ–Ω–∫–∞
const { data: sample, error } = await supabase
  .from('chunks')
  .select('id, source, path, embedding')
  .limit(5);

if (error) {
  console.error('‚ùå Error:', error);
  process.exit(1);
}

console.log(`Found ${sample.length} chunks:\n`);

sample.forEach((chunk, idx) => {
  const hasEmbedding = chunk.embedding !== null && chunk.embedding !== undefined;
  const embeddingInfo = hasEmbedding
    ? `‚úÖ EXISTS (length: ${Array.isArray(chunk.embedding) ? chunk.embedding.length : 'unknown'})`
    : '‚ùå NULL or missing';

  console.log(`[${idx + 1}] ${chunk.path}`);
  console.log(`    Embedding: ${embeddingInfo}`);
  console.log('');
});

// 2. –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ —Å embeddings –∏ –±–µ–∑
const { data: allChunks } = await supabase
  .from('chunks')
  .select('id, embedding');

const withEmbeddings = allChunks.filter(c => c.embedding !== null).length;
const withoutEmbeddings = allChunks.length - withEmbeddings;

console.log('üìä Statistics:');
console.log(`   Total chunks: ${allChunks.length}`);
console.log(`   With embeddings: ${withEmbeddings} ‚úÖ`);
console.log(`   Without embeddings: ${withoutEmbeddings} ‚ùå`);

if (withoutEmbeddings > 0) {
  console.log('\n‚ö†Ô∏è  WARNING: Some chunks missing embeddings!');
  console.log('   You need to run embedding generation script.');
}
